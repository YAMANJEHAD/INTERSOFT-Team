import streamlit as st
import pandas as pd
import io
import plotly.express as px
import streamlit.components.v1 as components
from datetime import datetime, timedelta
import os
import hashlib
import re
from PIL import Image, ImageDraw, ImageFont

# ุชููุฆุฉ ุงูุตูุญุฉ
st.set_page_config(
    page_title="INTERSOFT Analyzer",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ========== ูุธุงุฆู ูุณุงุนุฏุฉ ==========

def create_default_logo():
    """ุฅูุดุงุก ุดุนุงุฑ ุงูุชุฑุงุถู ุฅุฐุง ูู ููุฌุฏ ููู ุงูุตูุฑุฉ"""
    img = Image.new('RGB', (100, 100), color=(73, 109, 137))
    d = ImageDraw.Draw(img)
    try:
        font = ImageFont.truetype("arial.ttf", 20)
    except:
        font = ImageFont.load_default()
    d.text((10,10), "LOGO", fill=(255,255,0), font=font)
    return img

def load_logo():
    """ุชุญููู ุดุนุงุฑ ุงูุชุทุจูู"""
    try:
        return Image.open("logo.png")
    except:
        return create_default_logo()

def set_dark_mode():
    """ุชูุนูู ุงููุถุน ุงููููู"""
    st.markdown("""
    <style>
    .stApp {
        background-color: #1E1E1E;
        color: white;
    }
    .sidebar .sidebar-content {
        background-color: #2E2E2E;
    }
    .widget-label, .st-bb, .st-at, .st-ae, .st-af, .st-ag, .st-ah, .st-ai, .st-aj {
        color: white !important;
    }
    </style>
    """, unsafe_allow_html=True)

def normalize(text):
    """ุชูุญูุฏ ุชูุณูู ุงููุต"""
    text = str(text).upper()
    text = re.sub(r"[^\w\s]", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

def classify_note(note):
    """ุชุตููู ุงูููุงุญุธุงุช"""
    note = normalize(note)
    patterns = {
        "TERMINAL ID - WRONG DATE": ["TERMINAL ID WRONG DATE"],
        "NO IMAGE FOR THE DEVICE": ["NO IMAGE FOR THE DEVICE"],
        "IMAGE FOR THE DEVICE ONLY": ["IMAGE FOR THE DEVICE ONLY"],
        "WRONG DATE": ["WRONG DATE"],
        "TERMINAL ID": ["TERMINAL ID"],
        "NO J.O": ["NO JO", "NO J O"],
        "DONE": ["DONE"],
        "NO RETAILERS SIGNATURE": ["NO RETAILERS SIGNATURE", "NO RETAILER SIGNATURE"],
        "UNCLEAR IMAGE": ["UNCLEAR IMAGE"],
        "NO ENGINEER SIGNATURE": ["NO ENGINEER SIGNATURE"],
        "NO SIGNATURE": ["NO SIGNATURE","NO SIGNATURES"],
        "PENDING": ["PENDING"],
        "NO INFORMATIONS": ["NO INFORMATION", "NO INFORMATIONS"],
        "MISSING INFORMATION": ["MISSING INFORMATION"],
        "NO BILL": ["NO BILL"],
        "NOT ACTIVE": ["NOT ACTIVE"],
        "NO RECEIPT": ["NO RECEIPT"],
        "ANOTHER TERMINAL RECEIPT": ["ANOTHER TERMINAL RECEIPT"],
        "UNCLEAR RECEIPT": ["UNCLEAR RECEIPT"],
        "WRONG RECEIPT": ["WRONG RECEIPT"],
        "REJECTED RECEIPT": ["REJECTED RECEIPT"],
        "MULTIPLE ISSUES":["MULTIPLE ISSUES"]
    }
    if "+" in note: return "MULTIPLE ISSUES"
    matched_labels = []
    for label, keywords in patterns.items():
        if any(keyword in note for keyword in keywords):
            matched_labels.append(label)
    return matched_labels[0] if matched_labels else "MISSING INFORMATION"

def problem_severity(note_type):
    """ุชุญุฏูุฏ ุฎุทูุฑุฉ ุงููุดููุฉ"""
    severity_map = {
        "Critical": ["WRONG DATE", "TERMINAL ID - WRONG DATE", "REJECTED RECEIPT"],
        "High": ["NO IMAGE", "UNCLEAR IMAGE", "NO RECEIPT"],
        "Medium": ["NO SIGNATURE", "NO ENGINEER SIGNATURE"],
        "Low": ["NO J.O", "PENDING"]
    }
    for severity, types in severity_map.items():
        if note_type in types: return severity
    return "Unclassified"

def suggest_solutions(note_type):
    """ุงูุชุฑุงุญ ุญููู ูููุดุงูู"""
    solutions = {
        "WRONG DATE": "ุชุญูู ูู ุชุงุฑูุฎ ุงูุฌูุงุฒ ููุฒุงููุชู ูุน ุงูุฎุงุฏู",
        "TERMINAL ID - WRONG DATE": "ุชุญูู ูู ุฑูู ุงูุฌูุงุฒ ูุฅุนุฏุงุฏุงุช ุงูุชุงุฑูุฎ",
        "NO IMAGE FOR THE DEVICE": "ุงูุชูุงุท ุตูุฑุฉ ููุฌูุงุฒ ูุฑูุนูุง",
        "NO RETAILERS SIGNATURE": "ุชุฃูุฏ ูู ุชูููุน ุงูุชุงุฌุฑ ุนูู ุงููููุฐุฌ",
        "NO ENGINEER SIGNATURE": "ูุฌุจ ุนูู ุงููููุฏุณ ุงูุชูููุน ูุจู ุงูุชุณููู",
        "NO SIGNATURE": "ุงูุชูุงุท ุงูุชูููุนุงุช ุงููุทููุจุฉ ูู ุฌููุน ุงูุฃุทุฑุงู",
        "UNCLEAR IMAGE": "ุฅุนุงุฏุฉ ุงูุชูุงุท ุงูุตูุฑุฉ ุจุฅุถุงุกุฉ ุฃูุถู",
        "NOT ACTIVE": "ุชุญูู ูู ุนูููุฉ ุงูุชูุนูู ูุญุงูู ูุฑุฉ ุฃุฎุฑู",
        "NO BILL": "ุฅุฑูุงู ูุงุชูุฑุฉ ุตุงูุญุฉ",
        "NO RECEIPT": "ุฑูุน ุตูุฑุฉ ูุงุถุญุฉ ูุฅูุตุงู ุงููุนุงููุฉ",
        "ANOTHER TERMINAL RECEIPT": "ุชุฃูุฏ ูู ุฑูุน ุฅูุตุงู ุงูุฌูุงุฒ ุงูุตุญูุญ",
        "WRONG RECEIPT": "ุชุญูู ูุฑูุน ุงูุฅูุตุงู ุงูุตุญูุญ",
        "REJECTED RECEIPT": "ูุชุงุจุนุฉ ุณุจุจ ุงูุฑูุถ ูุชุตุญูุญู",
        "MULTIPLE ISSUES": "ุญู ุฌููุน ุงููุดุงูู ุงููุฐููุฑุฉ ูุชุญุฏูุซ ุงูููุงุญุธุฉ",
        "NO J.O": "ุชูููุฑ ุฑูู ุฃู ุชูุงุตูู ุฃูุฑ ุงูุนูู",
        "PENDING": "ุฅููุงู ูุฅุชูุงู ุงููููุฉ ุงููุนููุฉ",
        "MISSING INFORMATION": "ูุฑุงุฌุนุฉ ุงูููุงุญุธุฉ ูุชูููุฑ ุงูุชูุงุตูู ุงููุงููุฉ",
    }
    return solutions.get(note_type, "ูุง ููุฌุฏ ุญู ูุชุงุญ")

# ========== ูุงุฌูุฉ ุงููุณุชุฎุฏู ==========

# ุดุฑูุท ุงูุฃุฏูุงุช ุงูุฌุงูุจู
with st.sidebar:
    st.title("ุงูุฅุนุฏุงุฏุงุช")
    dark_mode = st.checkbox('๐ ุงููุถุน ุงููููู')
    if dark_mode: set_dark_mode()

# ุฑุฃุณ ุงูุตูุญุฉ
col1, col2 = st.columns([1, 4])
with col1:
    try:
        logo = load_logo()
        st.image(logo, width=80)
    except:
        st.markdown("### ๐ข")
with col2:
    st.markdown("<h1 style='color:#ffffff; margin-top:15px;'>๐ ูุธุงู ุชุญููู ุฅูุชุฑุณููุช</h1>", unsafe_allow_html=True)

# ุณุงุนุฉ ุฑูููุฉ
components.html("""
<div style="text-align:right; font-family:monospace; font-size:20px; margin-bottom:20px;">
    <div id="datetime"></div>
</div>
<script>
function updateTime() {
    const now = new Date();
    document.getElementById("datetime").innerHTML = 
        now.toLocaleDateString('ar-EG') + " | " + now.toLocaleTimeString('ar-EG');
}
setInterval(updateTime, 1000);
updateTime();
</script>
""", height=50)

# ========== ูุณู ุงูุชุฐุงูุฑ ุงููุนููุฉ ==========
st.markdown("## ๐ ุชุญููู ุงูุชุฐุงูุฑ ุงููุนููุฉ")

with st.expander("๐งฎ ุชุตููุฉ ุงูุชุฐุงูุฑ ุบูุฑ ุงูููุชููุฉ ุญุณุจ ุฑูู ุงูุชุฐูุฑุฉ", expanded=True):
    col1, col2 = st.columns(2)
    with col1:
        all_file = st.file_uploader("๐ ุฑูุน ููู ูู ุงูุชุฐุงูุฑ", type=["xlsx"])
    with col2:
        done_file = st.file_uploader("โ ุฑูุน ููู ุงูุชุฐุงูุฑ ุงูููุชููุฉ", type=["xlsx"])

    if all_file and done_file:
        try:
            all_df = pd.read_excel(all_file)
            done_df = pd.read_excel(done_file)

            if 'Ticket_ID' not in all_df.columns or 'Ticket_ID' not in done_df.columns:
                st.error("โ ูุฌุจ ุฃู ูุญุชูู ุงููููุงู ุนูู ุนููุฏ 'Ticket_ID'")
            else:
                # ุฅุฒุงูุฉ ุงูุชูุฑุงุฑุงุช
                all_df = all_df.drop_duplicates(subset=['Ticket_ID'], keep='first')
                done_df = done_df.drop_duplicates(subset=['Ticket_ID'], keep='first')
                
                pending_df = all_df[~all_df['Ticket_ID'].isin(done_df['Ticket_ID'])]
                
                # ูุคุดุฑุงุช ุงูุฃุฏุงุก
                st.markdown("### ๐ ููุงููุณ ุงูุฃุฏุงุก")
                cols = st.columns(4)
                with cols[0]:
                    st.metric("ุฅุฌูุงูู ุงูุชุฐุงูุฑ", len(all_df))
                with cols[1]:
                    st.metric("ุงูููุชููุฉ", len(done_df))
                with cols[2]:
                    st.metric("ุงููุนููุฉ", len(pending_df))
                with cols[3]:
                    percent = (len(pending_df)/len(all_df))*100 if len(all_df)>0 else 0
                    st.metric("ุงููุณุจุฉ ุงููุนููุฉ", f"{percent:.1f}%")

                # ุงูููุชุฑุฉ
                st.markdown("### ๐ ุชุตููุฉ ุงููุชุงุฆุฌ")
                filter_cols = st.columns(3)
                filters = {}
                
                if 'Date' in pending_df.columns:
                    with filter_cols[0]:
                        date_options = ["ูู ุงููุชุฑุงุช", "ุฃุณุจูุน", "ุดูุฑ"]
                        date_sel = st.selectbox("ุงููุชุฑุฉ ุงูุฒูููุฉ", date_options)
                        if date_sel == "ุฃุณุจูุน":
                            pending_df = pending_df[pending_df['Date'] >= (datetime.now() - timedelta(days=7))]
                        elif date_sel == "ุดูุฑ":
                            pending_df = pending_df[pending_df['Date'] >= (datetime.now() - timedelta(days=30))]
                
                if 'Technician_Name' in pending_df.columns:
                    with filter_cols[1]:
                        techs = st.multiselect("ุงูููู", pending_df['Technician_Name'].unique())
                        if techs:
                            pending_df = pending_df[pending_df['Technician_Name'].isin(techs)]
                
                if 'Ticket_Type' in pending_df.columns:
                    with filter_cols[2]:
                        types = st.multiselect("ููุน ุงูุชุฐูุฑุฉ", pending_df['Ticket_Type'].unique())
                        if types:
                            pending_df = pending_df[pending_df['Ticket_Type'].isin(types)]
                
                # ุนุฑุถ ุงููุชุงุฆุฌ
                st.dataframe(pending_df, use_container_width=True)
                
                # ุฎูุงุฑุงุช ุงูุชุตุฏูุฑ
                st.download_button(
                    "๐ฅ ุชุญููู ุงูุชุฐุงูุฑ ุงููุนููุฉ (Excel)",
                    pending_df.to_excel(index=False),
                    "pending_tickets.xlsx",
                    "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                )

        except Exception as e:
            st.error(f"โ ุฎุทุฃ ูู ูุนุงูุฌุฉ ุงููููุงุช: {str(e)}")

# ========== ุงูุชุญููู ุงูุฑุฆูุณู ==========
st.markdown("## ๐ ููุญุฉ ุงูุชุญููู ุงูุดุงููุฉ")

uploaded_file = st.file_uploader("๐ ุฑูุน ููู ุงูุจูุงูุงุช ููุชุญููู", type=["xlsx"])
required_cols = ['NOTE', 'Terminal_Id', 'Technician_Name', 'Ticket_Type']

if uploaded_file:
    try:
        df = pd.read_excel(uploaded_file)
        
        if not all(col in df.columns for col in required_cols):
            st.error(f"โ ุงูุฃุนูุฏุฉ ุงููุทููุจุฉ ุบูุฑ ููุฌูุฏุฉ. ุงูุฃุนูุฏุฉ ุงููุชุงุญุฉ: {list(df.columns)}")
        else:
            # ุชูุธูู ุงูุจูุงูุงุช
            if 'Ticket_ID' in df.columns:
                df = df.drop_duplicates(subset=['Ticket_ID'], keep='first')
            
            df['Note_Type'] = df['NOTE'].apply(classify_note)
            df['Problem_Severity'] = df['Note_Type'].apply(problem_severity)
            df['Suggested_Solution'] = df['Note_Type'].apply(suggest_solutions)
            
            # ุฃููุงู ูุณุชูู ุงูุฎุทูุฑุฉ
            severity_colors = {
                "Critical": "#FF0000",  # ุฃุญูุฑ
                "High": "#FFA500",      # ุจุฑุชูุงูู
                "Medium": "#FFFF00",    # ุฃุตูุฑ
                "Low": "#00FF00",       # ุฃุฎุถุฑ
                "Unclassified": "#808080" # ุฑูุงุฏู
            }
            
            # ูุคุดุฑุงุช ุงูุฃุฏุงุก
            st.markdown("### ๐ ูุธุฑุฉ ุนุงูุฉ ุนูู ุงูุฃุฏุงุก")
            kpi_cols = st.columns(4)
            
            with kpi_cols[0]:
                st.metric("ุฅุฌูุงูู ุงูุชุฐุงูุฑ", len(df))
            with kpi_cols[1]:
                done = len(df[df['Note_Type'] == 'DONE'])
                st.metric("ุงูููุชููุฉ", done)
            with kpi_cols[2]:
                critical = len(df[df['Problem_Severity'] == 'Critical'])
                st.metric("ูุดุงูู ุญุฑุฌุฉ", critical)
            with kpi_cols[3]:
                st.metric("ูุชูุณุท ููุช ุงูุญู", "3 ุฃูุงู")  # ูููู ุงุณุชุจุฏุงููุง ุจุญุณุงุจ ุญูููู
            
            # ุงูุชุตูุฑุงุช ุงูุจูุงููุฉ
            st.markdown("### ๐ ุงูุชุตูุฑุงุช ุงูุจูุงููุฉ")
            
            # ุฑุณู ุจูุงูู ููุฃููุงุน
            fig1 = px.pie(
                df['Note_Type'].value_counts().reset_index(),
                names='Note_Type',
                values='count',
                title="ุชูุฒูุน ุฃููุงุน ุงูููุงุญุธุงุช"
            )
            st.plotly_chart(fig1, use_container_width=True)
            
            # ุฑุณู ุจูุงูู ููุณุชูู ุงูุฎุทูุฑุฉ
            severity_df = df['Problem_Severity'].value_counts().reset_index()
            fig2 = px.bar(
                severity_df,
                x='Problem_Severity',
                y='count',
                color='Problem_Severity',
                color_discrete_map=severity_colors,
                title="ุชูุฒูุน ุงููุดุงูู ุญุณุจ ูุณุชูู ุงูุฎุทูุฑุฉ"
            )
            st.plotly_chart(fig2, use_container_width=True)
            
            # ุชุญููู ุงูููููู
            st.markdown("### ๐จโ๐ง ุชุญููู ุฃุฏุงุก ุงูููููู")
            
            tech_df = df.groupby('Technician_Name').agg({
                'Ticket_Type': 'count',
                'Problem_Severity': lambda x: (x == 'Critical').sum()
            }).rename(columns={
                'Ticket_Type': 'Total_Tickets',
                'Problem_Severity': 'Critical_Issues'
            }).sort_values('Total_Tickets', ascending=False)
            
            st.dataframe(tech_df, use_container_width=True)
            
            # ุชุตุฏูุฑ ุงูุชูุฑูุฑ ุงูููุงุฆู
            st.markdown("### ๐ค ุชุตุฏูุฑ ุงููุชุงุฆุฌ")
            
            output = io.BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                df.to_excel(writer, sheet_name="ุงูุจูุงูุงุช ุงููุงููุฉ", index=False)
                tech_df.to_excel(writer, sheet_name="ุฃุฏุงุก ุงูููููู", index=True)
            
            st.download_button(
                "๐ฅ ุชุญููู ุงูุชูุฑูุฑ ุงููุงูู",
                output.getvalue(),
                "full_report.xlsx",
                "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )

    except Exception as e:
        st.error(f"โ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูููู: {str(e)}")

# ุชุฐููู ุงูุตูุญุฉ
st.markdown("""
<div style="text-align:center; margin-top:50px; padding:20px; background:#f0f2f6;">
    <p>ูุธุงู ุชุญููู ุฅูุชุฑุณููุช - ุงูุฅุตุฏุงุฑ 1.0</p>
    <p>ยฉ 2023 ุฌููุน ุงูุญููู ูุญููุธุฉ</p>
</div>
""", unsafe_allow_html=True)
